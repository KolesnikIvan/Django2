"""
Django settings for geekshop project.

Generated by 'django-admin startproject' using Django 2.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
from pathlib import Path
import json
import debug_toolbar
import mimetypes

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'uogr3!m4bqcxj@zv)(uh@%2m(e$$wq_*fp3!9y2&-+tsgxtqhx'

DJANGO_PRODUCTION = bool(os.environ.get('DJANGO_PRODUCTION', False))
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# DEBUG = not DJANGO_PRODUCTION

ALLOWED_HOSTS = ['127.0.0.1'] if DJANGO_PRODUCTION else ['*']

# internal ipaddresses for debug toolbar
INTERNAL_IPS = [
    '127.0.0.1',
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'debug_toolbar',
    # 'template_profiler_panel',

    'social_django',

    'mainapp',
    'authapp',
    'basketapp',
    'adminapp',
    'ordersapp',
]

if DEBUG:
    INSTALLED_APPS.extend([
        'debug_toolbar',
        'template_profiler_panel',
        'django_extensions',
    ])

MIDDLEWARE = [
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'social_django.middleware.SocialAuthExceptionMiddleware',
]
# if DEBUG:
#     MIDDLEWARE.append('debug_toolbar.middleware.DebugToolbarMiddleware')

if DEBUG:
    # import pdb; pdb.set_trace()
    # https://django.fun/qa/30455/
    # https://github.com/jazzband/django-debug-toolbar/issues/1336
    mimetypes.add_type('application/javascript', '.js', True)
    mimetypes.add_type('text/plain', '.txt', True)
    
    def show_toolbar(request):
        return True
        # вариант вызова debug_toolbar специальным запросом debug=1
        # return bool(request.GET.get('debug', '0'))

    DEBUG_TOOLBAR_CONFIG = {
    # 'SHOW_TOOLBAR_CALLBACK': show_toolbar,
      'SHOW_TOOLBAR_CALLBACK': lambda x: True,
    # 'INTERCEPT_REDIRECTS': False,
    }
    
    DEBUG_TOOLBAR_PANELS = [
        'debug_toolbar.panels.versions.VersionsPanel',
        'debug_toolbar.panels.timer.TimerPanel',
        'debug_toolbar.panels.settings.SettingsPanel',
        'debug_toolbar.panels.headers.HeadersPanel',
        'debug_toolbar.panels.request.RequestPanel',
        'debug_toolbar.panels.sql.SQLPanel',
        'debug_toolbar.panels.templates.TemplatesPanel',
        'debug_toolbar.panels.staticfiles.StaticFilesPanel',
        'debug_toolbar.panels.cache.CachePanel',
        'debug_toolbar.panels.signals.SignalsPanel',
        'debug_toolbar.panels.logging.LoggingPanel',
        'debug_toolbar.panels.redirects.RedirectsPanel',
        'debug_toolbar.panels.profiling.ProfilingPanel',
        'template_profiler_panel.panels.template.TemplateProfilerPanel',
    ]
# STATIC_ROOT = os.path.join(BASE_DIR, 'static')

ROOT_URLCONF = 'geekshop.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'mainapp.context_processors.menu_links',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

WSGI_APPLICATION = 'geekshop.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

# логины/пароли прячем в системные переменные
# DJANGO_DB_NAME = os.environ.get('DJANGO_DB_NAME', 'geekshop')
# DJANGO_DB_USER = os.environ.get('DJANGO_DB_USER', 'django')
# DJANGO_DB_PASSWORD = os.environ.get('DJANGO_DB_PASSWORD', 'master')
# DJANGO_DB_HOST = os.environ.get('DJANGO_DB_HOST', '127.0.0.1')
# DJANGO_DB_PORT = os.environ.get('DJANGO_DB_PORT', 5432)
if DJANGO_PRODUCTION:
    DJANGO_DB_NAME = os.environ.get('DJANGO_DB_NAME')
    DJANGO_DB_USER = os.environ.get('DJANGO_DB_USER')
    DJANGO_DB_PASSWORD = os.environ.get('DJANGO_DB_PASSWORD')
    DJANGO_DB_HOST = os.environ.get('DJANGO_DB_HOST')
    DJANGO_DB_PORT = int(os.environ.get('DJANGO_DB_PORT'))
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': DJANGO_DB_NAME,
            'USER': DJANGO_DB_USER,
            'PASSWORD': DJANGO_DB_PASSWORD,
            'HOST': DJANGO_DB_HOST,
            'PORT': DJANGO_DB_PORT,
        }
    }
    assert all([
        DJANGO_DB_NAME,
        DJANGO_DB_USER,
        DJANGO_DB_PASSWORD,
        DJANGO_DB_HOST,
        DJANGO_DB_PORT,
    ])
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Yekaterinburg'  # 'UTC'  # 'UTC+5'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Auth
AUTH_USER_MODEL = 'authapp.ShopUser'

LOGIN_URL = 'auth:login'
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'social_core.backends.github.GithubOAuth2',
    'social_core.backends.google.GoogleOAuth2',
    ]

with open('./credentials.json', 'r') as credentials_file:
    credentials = json.load(credentials_file)
    SOCIAL_AUTH_GITHUB_KEY = credentials['GITHUB_KEY']
    SOCIAL_AUTH_GITHUB_SECRET = credentials['GITHUB_SECRET']
    SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = credentials['GOOGLE_OAUTH2_KEY']
    SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = credentials['GOOGLE_OAUTH2_SECRET']
    # SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [...]

# Email
# EMAIL_HOST = 'localhost'
# EMAIL_PORT = '2025'
# EMAIL_USE_SSL = False
# # EMAIL_HOST_USER = 'admin@localhost'
# # EMAIL_PORT_PASSWORD = 'adminadmin'
DOMAIN_NAME = 'localhost'
EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'
EMAIL_FILE_PATH = 'tmp/emails'
from django.core.mail.backends.filebased import EmailBackend

SOCIAL_AUTH_GITHUB_OAUTH2_SCOPE = ['user',]

SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.social_auth.associate_by_email',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
    'authapp.pipline.get_user_location_and_bio',
)

# INTERNAL_IPS = ['127.0.0.1',]
